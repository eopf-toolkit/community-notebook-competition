name: Validate submission.md

on:
  pull_request:

jobs:
  validate-submission:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
      pull-requests: write

    steps:
      - name: Check out PR code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: Sync
        run: |
          uv sync

      - name: Find changed submission.md path in PR
        id: find_submission
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const number = context.payload.pull_request.number;

            const files = await github.paginate(
              github.rest.pulls.listFiles,
              { owner, repo, pull_number: number, per_page: 100 }
            );

            const candidates = files
              .map(f => f.filename)
              .filter(p => /(^|\/)submission\.md$/i.test(p));

            if (candidates.length === 0) {
              core.setFailed("No file named 'submission.md' was changed in this PR.");
              return;
            }
            if (candidates.length > 1) {
              core.setFailed(`Multiple 'submission.md' files found: ${candidates.join(", ")}`);
            }

            core.setOutput("path", candidates[0]);

      - name: Run schema validation
        id: schema
        shell: bash
        run: |
          set -o pipefail

          set +e
          NO_COLOR=1 uv run .github/workflows/check_submission_md.py "${{ steps.find_submission.outputs.path }}" 2>&1 | tee schema_output.txt
          exit_code=${PIPESTATUS[0]}
          set -e

          {
            echo "exit_code=$exit_code"
            echo 'message<<SCHEMA_OUTPUT'
            cat schema_output.txt
            echo 'SCHEMA_OUTPUT'
          } >> "$GITHUB_OUTPUT"

          exit "$exit_code"

      - name: Find Comment
        uses: peter-evans/find-comment@v4
        if: failure() && github.event.pull_request.number
        id: find-comment
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: "github-actions[bot]"
          body-includes: Submission Validation Failed

      - name: Create or update comment
        uses: peter-evans/create-or-update-comment@v5
        if: failure() && github.event.pull_request.number
        with:
          comment-id: ${{ steps.find-comment.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            # :warning: Submission Validation Failed :warning:

            ${{ steps.schema.outputs.message }}
          edit-mode: replace

      - name: Find existing failure comment
        if: success() && github.event.pull_request.number
        id: find-success-comment
        uses: peter-evans/find-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: "github-actions[bot]"
          body-includes: Submission Validation Failed

      - name: Delete previous failure comment
        if: success() && steps.find-success-comment.outputs.comment-id
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.deleteComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: ${{ steps.find-success-comment.outputs.comment-id }}
            });
